AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC to deploy private subnets into.

  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet in first preferred availability zone.

  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: First preferred availability zone.

  AvailabilityZone1Ipv4Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: An IPv4 CIDR block of 10.0.2.0/24 will give you a subnet with range 10.0.2.0 - 10.0.2.255.

  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet in second preferred availability zone.

  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Second preferred availability zone.

  AvailabilityZone2Ipv4Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: An IPv4 CIDR block of 10.0.3.0/24 will give you a subnet with range 10.0.3.0 - 10.0.3.255.

Metadata:

  AWS::CloudFormation::Interface:

    ParameterGroups:
      - Label:
          default: VPC
        Parameters:
          - VPC
      - Label:
          default: Availability Zone 1
        Parameters:
          - PublicSubnet1
          - AvailabilityZone1
          - AvailabilityZone1Ipv4Cidr
      - Label:
          default: Availability Zone 2
        Parameters:
          - PublicSubnet2
          - AvailabilityZone2
          - AvailabilityZone2Ipv4Cidr

    ParameterLabels:
      VPC:
        default: Existing VPC
      PublicSubnet1:
        default: Existing public subnet
      AvailabilityZone1:
        default: Availabilty Zone
      AvailabilityZone1Ipv4Cidr:
        default: IPv4 CIDR
      PublicSubnet2:
        default: Existing public subnet
      AvailabilityZone2:
        default: Availabilty Zone
      AvailabilityZone2Ipv4Cidr:
        default: IPv4 CIDR


Resources:

  #
  # SUBNETS
  #

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AvailabilityZone1
      CidrBlock:
        Ref: AvailabilityZone1Ipv4Cidr
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              -
                - private-subnet-1
                - !Ref AWS::StackName
      VpcId:
        Ref: VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AvailabilityZone2
      CidrBlock:
        Ref: AvailabilityZone2Ipv4Cidr
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              -
                - private-subnet-2
                - !Ref AWS::StackName
      VpcId:
        Ref: VPC


  #
  # NAT GATEWAY (AVAILABILITY ZONE 1)
  #

  NATGateway1ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATGateway1ElasticIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnet1


  #
  # NAT GATEWAY (AVAILABILITY ZONE 2)
  #

  NATGateway2ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATGateway2ElasticIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnet2


  #
  # ROUTE TABLES
  #

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              -
                - rt-private-1
                - !Ref AWS::StackName

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              -
                - rt-private-2
                - !Ref AWS::StackName


  #
  # EGRESS ROUTES
  #

  PrivateSubnetRouteToNATGateway1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway1
      RouteTableId:
        Ref: PrivateRouteTable1

  PrivateSubnetRouteToNATGateway2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway2
      RouteTableId:
        Ref: PrivateRouteTable2


  #
  # SUBNET ROUTING
  #

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      SubnetId:
        Ref: PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      SubnetId:
        Ref: PrivateSubnet2
