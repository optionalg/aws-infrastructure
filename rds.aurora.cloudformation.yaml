AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC to deploy into.

  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet in first preferred availability zone.

  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet in second preferred availability zone.

  AllowCidr:
    Type: String
    Description: >
      CIDR block to allow access to the database instances. Set this to your
      VPC CIDR block to allow connections from any subnet.

  InstanceType:
    Type: String
    Default: db.t2.medium
    Description: Hardware instance type.

  MasterUsername:
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    Description: >
      Username of the master/root/admin to create. You will need to use this
      user to log into the cluster. 1-16 alphanumeric characters, must start
      with a letter.

  MasterPassword:
    NoEcho: True
    Type: String
    MinLength: 8
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"
    Description: >
      Password of the master/root/admin to create. You will need to use this
      user to log into the cluster. 8-41 alphanumeric characters.

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network
        Parameters:
          - VPC
          - Subnet1
          - Subnet2
      - Label:
          default: Security
        Parameters:
          - AllowCidr
      - Label:
          default: Hardware
        Parameters:
          - InstanceType
      - Label:
          default: Master credentials
        Parameters:
          - MasterUsername
          - MasterPassword
    ParameterLabels:
      Subnet1:
        default: Subnet 1
      Subnet2:
        default: Subnet 2
      AllowCidr:
        default: Allow connections from CIDR
      InstanceType:
        default: Instance type
      MasterUsername:
        default: Master username
      MasterPassword:
        default: Master password

Resources:

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Join:
          - .
          -
            - security-group.aurora
            - !Ref AWS::StackName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref AllowCidr
      VpcId: !Ref VPC

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription:
        Fn::Join:
          - .
          -
            - subnet-group.aurora
            - !Ref AWS::StackName
      SubnetIds:
        - Ref: Subnet1
        - Ref: Subnet2

  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 14
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterPassword
      VpcSecurityGroupIds:
        - Ref: SecurityGroup

  DBInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: !Ref InstanceType
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora
      PubliclyAccessible: False

  DBInstance2:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: !Ref InstanceType
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora
      PubliclyAccessible: False

Outputs:

  Address:
    Description: Cluster endpoint.
    Value: !GetAtt DBCluster.Endpoint.Address
