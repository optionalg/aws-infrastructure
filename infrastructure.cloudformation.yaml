AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  VpcIpv4Cidr:
    Type: String
    Default: 10.0.0.0/22
    Description: An IPv4 CIDR block of 10.0.0.0/22 will give you a VPC with range 10.0.0.0 - 10.0.3.255.

  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: First preferred availability zone.

  AvailabilityZone1Ipv4Cidr:
    Type: String
    Default: 10.0.0.0/24
    Description: An IPv4 CIDR block of 10.0.0.0/24 will give you a subnet with range 10.0.0.0 - 10.0.0.255.

  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Second preferred availability zone.

  AvailabilityZone2Ipv4Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: An IPv4 CIDR block of 10.0.1.0/24 will give you a subnet with range 10.0.1.0 - 10.0.1.255.

Metadata:

  AWS::CloudFormation::Interface:

    ParameterGroups:
      - Label:
          default: VPC
        Parameters:
          - VpcIpv4Cidr
      - Label:
          default: Availability Zone 1
        Parameters:
          - AvailabilityZone1
          - AvailabilityZone1Ipv4Cidr
      - Label:
          default: Availability Zone 2
        Parameters:
          - AvailabilityZone2
          - AvailabilityZone2Ipv4Cidr

    ParameterLabels:
      VpcIpv4Cidr:
        default: VPC CIDR block
      AvailabilityZone1:
        default: Availabilty Zone
      AvailabilityZone1Ipv4Cidr:
        default: IPv4 CIDR
      AvailabilityZone2:
        default: Availabilty Zone
      AvailabilityZone2Ipv4Cidr:
        default: IPv4 CIDR


Resources:

  #
  # VPC
  #

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcIpv4Cidr

      # DNS support is required for domain-based EFS mounting. Domain-based EFS
      # mounting will automatically select the mount point in the correct
      # availability zone.
      EnableDnsSupport: True

      # DNS hostnames are required for domain-based EFS mounting. Domain-based
      # EFS mounting will automatically select the mount point in the correct
      # availability zone.
      EnableDnsHostnames: True

      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              -
                - vpc
                - !Ref AWS::StackName


  #
  # INTERNET GATEWAY
  #

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              -
                - ig
                - !Ref AWS::StackName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  #
  # SUBNETS
  #

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref AvailabilityZone1Ipv4Cidr
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              -
                - public-subnet-1
                - !Ref AWS::StackName
      VpcId: !Ref VPC

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref AvailabilityZone2Ipv4Cidr
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              -
                - public-subnet-2
                - !Ref AWS::StackName
      VpcId: !Ref VPC


  #
  # ROUTE TABLES
  #

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              -
                - rt-public
                - !Ref AWS::StackName


  #
  # EGRESS ROUTES
  #

  SubnetRouteToInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable


  #
  # SUBNET ROUTING
  #

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2
